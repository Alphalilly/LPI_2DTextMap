using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Diagnostics.Trace;

namespace LPI_2DTextMap
{
    class Program
    {
        //private const char V = 'g'; what?

        static void Main()
        {
            //char w = '~';
            //char g = ':';
            //char t = '*';
            //char m = '^';

            //{'m','m','m','g','g','g','g','g','g','g','g','g','g','g'},
            //{'m','m','g','g','g','g','t','t','t','g','g','g','g','g'},
            //{'m','g','g','g','t','t','t','t','t','t','g','g','g','g'},
            //{'g','g','g','g','g','g','g','g','g','g','g','g','g','g'},
            //{'g','g','g','g','w','w','w','g','g','g','g','g','g','g'},
            //{'g','g','g','w','w','w','w','w','g','g','g','g','g','g'},
            //{'g','t','t','g','w','w','w','w','w','g','g','g','g','g'},
            //{'t','t','t','g','g','g','w','w','w','g','g','g','g','g'},
            //{'g','g','g','g','g','g','g','w','g','g','g','g','g','g'},
            //{'g','g','g','g','g','g','g','t','t','t','t','g','g','g'},
            //{'g','g','g','g','g','m','m','m','g','g','g','g','g','g'},
            //{'g','g','g','m','m','m','m','m','m','m','m','m','m','g'},

            char[,] map = new char[,]
            {
                {'^','^','^','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\''},
                {'^','^','\'','\'','\'','\'','*','*','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','~','~','~','\'','\'','\''},
                {'^','^','\'','\'','\'','*','*','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','~','~','~','\'','\'','\'','\'','\''},
                {'^','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\''},
                {'\'','\'','\'','\'','~','~','~','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\''},
                {'\'','\'','\'','\'','~','~','~','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\''},
                {'\'','\'','\'','~','~','~','~','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','^','^','\'','\'','\'','\'','\'','\''},
                {'\'','\'','\'','\'','\'','~','~','~','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','^','^','^','^','\'','\'','\'','\'','\''},
                {'\'','\'','\'','\'','\'','~','~','~','~','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','^','^','^','^','\'','\'','\''},
                {'\'','\'','\'','\'','\'','\'','\'','~','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\''},
                {'\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\''},
                {'\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\'','\''},
            };

            int x;
            int y;

            for (y = 0; y < 12; y++)
            {
                WriteLine("|");
                for (x = 0; x < 30; x++)
                {
                    Write(map[y, x]);
                }
            }
            Console.ReadKey(true);
        }
    }
}




















// 1 pixel = 1 char
// max 1000 x 1000 pixels
// min 100 x 100
// use an image map to decide what goes where?
// this might be too advanced